/*
 * pipeline input params
 */
params{
//help
    h                  = false
    help               = false
//nextflow
    M_nextflow         = "/calculate/home/user/shuziqiang/00.scripts/nextflow"
    G_nextflow         = "/data/user/fanpengyu/00.software/nextflow"
    T_nextflow         = "/calculate/software/bin/nextflow"
    Y_nextflow         = "/mnt/sharefs/home/bnfanpy/bin/nextflow"
//pipline dir
    M_pipline_dir      = "/calculate/pipline/all_fun"
    G_pipline_dir      = "/data/pipline/GenomicAnalysis/07.function"
    T_pipline_dir      = "/calculate/pipline/all_fun"
    Y_pipline_dir      = "/mnt/sharefs/home/bnfanpy/01.pipline/all_fun"
//tmp dir
    M_pipline_temp     = "/calculate/home/user/fanpengyu/tmp"
    G_pipline_temp     = "/data/user/fanpengyu/tmp"
    T_pipline_temp     = "/calculate/home/user/fanpengyu/tmp"
    Y_pipline_temp     = "/mnt/sharefs/home/bnfanpy/tmp"
//public pan
    M_Wuhan_mount      = "-v /calculate:/calculate -v /deposit:/deposit -v /central_memory1:/central_memory1"
    G_Wuhan_mount      = "-v /calculate:/calculate -v /deposit:/deposit -v /central_memory1:/central_memory1 -v /data:/data -v /bngpfs:/bngpfs"
    T_Wuhan_mount      = "-v /calculate:/calculate -v /deposit:/deposit -v /central_memory1:/central_memory1"
    Y_Wuhan_mount      = "-v /mnt/sharefs:/mnt/sharefs"
}

//for sge
params{
    queueq             = "all.q"
    Kegg_mem           = "3"
    Nr_mem             = "6"
    Uniprot_mem        = "6"
    Pfam_mem           = "3"
    Interpro_mem       = "20"
    Refseq_mem         = "5"
}

//base
params{
    map_soft           = "blastp"
    kegg_map_soft      = "hmmscan" //hmmscan or hmmsearch or blastp
    trans              = "None"
    regular_out        = "Result"
    specific_out       = "Result"
    element_out        = "Result"
    sample_name        = "None"
    kingdom            = "All"
    Phylum             = "Animals"
}

//software
params{
    diamond            = "/usr/bin/diamond"
    blastp             = "/usr/bin/blastp"
    hmmscan            = "/usr/bin/hmmscan"
//signalp加环境变量吧
    signalpP           = "signalp"
    tmhmmDir           = "/software/tmhmm-2.0c"
    deeplocP           = "/usr/bin/deeploc"
    rgi                = "/usr/local/bin/rgi"
    PhiSpy             = "/usr/local/bin/PhiSpy.py"
    Dimobp             = "/usr/bin/Dimob.pl"
    SoftAnti           = "/usr/local/bin/antismash"
}

//all split info
params{
    split              = 15
    engine             = "ncbiblast"
    cpu                = "16"
}

//database path
//Microorganisms
params{
    M_kegg_real_db     = "/calculate/database/kegg/latest"
    M_nr_real_db       = "/calculate/database/nr/2024-07-05"
    M_uniprot_real_db  = "/calculate/database/uniprot/2024-07-06"
    M_pfam_real_db     = "/calculate/database/pfam/2024-07-01"
    M_interpro_real_db = "/calculate/database/interpro/5.55-88.0/interproscan-5.55-88.0"
    M_refseq_real_db   = "/calculate/database/refseq/pep"
    M_anim_tf_real_db  = "/calculate/database/tf/Animal"
    M_plant_tf_real_db = "/calculate/database/tf/Plant"
    M_tigerfam_real_db = "/calculate/database/tigerfam"
    M_tcdb_real_db     = "/calculate/database/tcdb"
    M_cazy_real_db     = "/calculate/database/cazy"
    M_cyped_real_db    = "/calculate/database/cyped"
    M_card_real_db     = "/calculate/database/card"
    M_ardb_real_db     = "/calculate/database/ardb"
    M_vfdb_real_db     = "/calculate/database/vfdb"
    M_phi_real_db      = "/calculate/database/phi"
    M_egg_real_db      = "/calculate/database/eggnog"
}
//Genome
params{
    G_kegg_real_db     = "/data/database/kegg/latest"
    G_nr_real_db       = "/data/database/nr/2024-07-05"
    G_uniprot_real_db  = "/data/database/uniprot/2024-07-06"
    G_pfam_real_db     = "/data/database/pfam/2024-07-01"
    G_interpro_real_db = "/data/database/interpro/5.55-88.0/interproscan-5.55-88.0"
    G_refseq_real_db   = "/data/database/refseq/pep"
    G_anim_tf_real_db  = "/data/database/tf/Animal"
    G_plant_tf_real_db = "/data/database/tf/Plant"
    G_tigerfam_real_db = "/data/database/tigerfam"
    G_tcdb_real_db     = "/data/database/tcdb"
    G_cazy_real_db     = "/data/database/cazy"
    G_cyped_real_db    = "/data/database/cyped"
    G_card_real_db     = "/data/database/card"
    G_ardb_real_db     = "/data/database/ardb"
    G_vfdb_real_db     = "/data/database/vfdb"
    G_phi_real_db      = "/data/database/phi"
    G_egg_real_db      = "/data/database/eggnog"
}
//Transcriptome
params{
    T_kegg_real_db     = "/calculate/database/kegg/latest"
    T_nr_real_db       = "/calculate/database/nr/2024-07-05"
    T_uniprot_real_db  = "/calculate/database/uniprot/2024-07-06"
    T_pfam_real_db     = "/calculate/database/pfam/2024-07-01"
    T_interpro_real_db = "/calculate/database/interpro/5.55-88.0/interproscan-5.55-88.0"
    T_refseq_real_db   = "/calculate/database/refseq/pep"
    T_anim_tf_real_db  = "/calculate/database/tf/Animal"
    T_plant_tf_real_db = "/calculate/database/tf/Plant"
    T_tigerfam_real_db = "/calculate/database/tigerfam"
    T_tcdb_real_db     = "/calculate/database/tcdb"
    T_cazy_real_db     = "/calculate/database/cazy"
    T_cyped_real_db    = "/calculate/database/cyped"
    T_card_real_db     = "/calculate/database/card"
    T_ardb_real_db     = "/calculate/database/ardb"
    T_vfdb_real_db     = "/calculate/database/vfdb"
    T_phi_real_db      = "/calculate/database/phi"
    T_egg_real_db      = "/calculate/database/eggnog"
}

//wuda
params{
    Y_kegg_real_db     = "/mnt/sharefs/home/bnjijl/database/kegg/2024-10-12"
    Y_nr_real_db       = "/mnt/sharefs/home/bnjijl/database/nr/2024-07-05"
    Y_uniprot_real_db  = "/mnt/sharefs/home/bnjijl/database/uniprot/2024-07-06"
    Y_pfam_real_db     = "/mnt/sharefs/home/bnjijl/database/pfam/2024-07-01"
    Y_interpro_real_db = "/mnt/sharefs/home/bnjijl/database/interpro/5.55-88.0/interproscan-5.55-88.0"
    Y_refseq_real_db   = "/mnt/sharefs/home/bnjijl/database/refseq/pep"
    Y_anim_tf_real_db  = "/mnt/sharefs/home/bnjijl/database/tf/Animal"
    Y_plant_tf_real_db = "/mnt/sharefs/home/bnjijl/database/tf/Plant"
    Y_tigerfam_real_db = "/mnt/sharefs/home/bnjijl/database/tigerfam"
    Y_tcdb_real_db     = "/mnt/sharefs/home/bnjijl/database/tcdb"
    Y_cazy_real_db     = "/mnt/sharefs/home/bnjijl/database/cazy"
    Y_cyped_real_db    = "/mnt/sharefs/home/bnjijl/database/cyped"
    Y_card_real_db     = "/mnt/sharefs/home/bnjijl/database/card"
    Y_ardb_real_db     = "/mnt/sharefs/home/bnjijl/database/ardb"
    Y_vfdb_real_db     = "/mnt/sharefs/home/bnjijl/database/vfdb"
    Y_phi_real_db      = "/mnt/sharefs/home/bnjijl/database/phi"
    Y_egg_real_db      = "/mnt/sharefs/home/bnjijl/database/eggnog"
}

//kegg
params{
    kegg               = false
    kegg_org           = "None"
    kevalue            = "1e-5"
    splitk             = 20
    kcpu               = "16"
    maxF_k             = "10"
    kegg_db            = "/annotation/kegg"
    All_khmm           = "ko.hmm"
    All_kegg           = "ko.pep.fasta.dmnd"
    All_ko             = "KoPathways.txt"
    Animals_khmm       = "Animals.hmm"
    Animals_kegg       = "Animals.pep.fasta.dmnd"
    Animals_ko         = "Animals_KoPathways.txt"
    Archaea_khmm       = "Archaea.hmm"
    Archaea_kegg       = "Archaea.pep.fasta.dmnd"
    Archaea_ko         = "Archaea_KoPathways.txt"
    Bacteria_khmm      = "Bacteria.hmm"
    Bacteria_kegg      = "Bacteria.pep.fasta.dmnd"
    Bacteria_ko        = "Bacteria_KoPathways.txt"
    Fungi_khmm         = "Fungi.hmm"
    Fungi_kegg         = "Fungi.pep.fasta.dmnd"
    Fungi_ko           = "Fungi_KoPathways.txt"
    Plants_khmm        = "Plants.hmm"
    Plants_kegg        = "Plants.pep.fasta.dmnd"
    Plants_ko          = "Plants_KoPathways.txt"
    human_khmm         = "human.hmm"
    human_kegg         = "human.pep.fasta.dmnd"
    human_ko           = "human_KoPathways.txt"
    B_A_khmm           = "B_A.hmm"
    B_A_kegg           = "B_A.pep.fasta.dmnd"
    B_A_ko             = "B_A_KoPathways.txt"
    B_A_F_khmm         = "B_A_F.hmm"
    B_A_F_kegg         = "B_A_F.pep.fasta.dmnd"
    B_A_F_ko           = "B_A_F_KoPathways.txt"
}

//nr
params{
    nr                 = false
    splitn             = 20
    ncpu               = "16"
    maxF_n             = "8"
    nr_db              = "/annotation/nr"
    All_nr             = "nr.dmnd"
    Animal_nr          = "Animal_nr.fa.dmnd"
    Archaea_nr         = "Archaea_nr.fa.dmnd"
    Bacteria_nr        = "Bacteria_nr.fa.dmnd"
    Fungi_nr           = "Fungi_nr.fa.dmnd"
    Plant_nr           = "Plant_nr.fa.dmnd"
    Virus_nr           = "Virus_nr.fa.dmnd"
    B_A_V_nr           = "B_A_V_nr.fa.dmnd"
    B_A_V_F_nr         = "B_A_V_F_nr.fa.dmnd"
}

//uniprot
params{
    uniprot            = false
    splitu             = 20
    ucpu               = "16"
    maxF_u             = "8"
    go                 = false
    eggnog             = false
    cog                = false
    kog                = false
    uniprot_db         = "/annotation/uniprot"
    All_uniprot        = "uniprot.fa.dmnd"
    uniprot_animal     = "uniprot_animal.fa.dmnd"
    uniprot_archaea    = "uniprot_archaea.fa.dmnd"
    uniprot_bacteria   = "uniprot_bacteria.fa.dmnd"
    uniprot_fungi      = "uniprot_fungi.fa.dmnd"
    uniprot_plants     = "uniprot_plants.fa.dmnd"
    uniprot_viruses    = "uniprot_viruses.fa.dmnd"
    uniprot_human      = "uniprot_human.fa.dmnd"
    uniprot_B_A_V      = "uniprot_B_A_V.fa.dmnd"
    uniprot_B_A_V_F    = "uniprot_B_A_V_F.fa.dmnd"
    egg_db             = "/annotation/eggnog"
    egg_cpu            = "16"
}

//pfam
params{
    pfam               = false
    splitp             = 20
    pcpu               = "16"
    maxF_p             = "8"
    pfam_db            = "/annotation/pfam"
}

//interpro
params{
    interpro           = false
    spliti             = 20
    cutForS            = "cutf"
    icpu               = "16"
    maxF_i             = "6"
    interpro_db        = "/annotation/interpro"
}

//refseq
params{
    refseq             = false
    splitr             = 20
    rcpu               = "16"
    maxF_r             = "8"
    refseq_db          = "/annotation/refseq/pep"
    All_refseq         = "refseq.protein.faa.dmnd"
    Animal_refseq      = "animal.protein.faa.dmnd"
    Archaea_refseq     = "archaea.protein.faa.dmnd"
    Bacteria_refseq    = "bacteria.protein.faa.dmnd"
    Fungi_refseq       = "fungi.protein.faa.dmnd"
    Plant_refseq       = "plant.protein.faa.dmnd"
    Virus_refseq       = "viral.protein.faa.dmnd"
    B_A_V_refseq       = "B_A_V.protein.faa.dmnd"
    B_A_V_F_refseq     = "B_A_F_V.protein.faa.dmnd"
}

//tf
params{
    tf                 = false
    anim_tf_db         = "/annotation/tf/Animal"
    plant_tf_db        = "/annotation/tf/Plant"
}

//tigerfam
params{
    tigerfam           = false
    tigerfam_db        = "/annotation/tigerfam"
    splitt             = 20
    tcpu               = "16"
    maxF_t             = "6"
}

//tcdb
params{
    tcdb               = false
    tcdb_db            = "/annotation/tcdb"
}

//cazy
params{
    cazy               = false
    cazy_db            = "/annotation/cazy"
}

//cyped
params{
    cyped              = false
    cyped_db           = "/annotation/cyped"
}

//signalp
params{
    signalp            = false
    signalp_type       = "euk"
    maxF_Sig           = "10"
    pict_Signal        = "n"
}

//tmhmm
params{
    tmhmm              = false
    maxF_Tm            = "10"
    pict_Tmhmm         = "n"
}

//deeploc
params{
    deeploc            = false
    maxF_d             = "10"
}

//card
params{
    card               = false
    card_db            = "/annotation/card"
}

//ardb
params{
    ardb               = false
    ardb_db            = "/annotation/ardb"
}

//vfdb
params{
    vfdb               = false
    vfdb_db            = "/annotation/vfdb"
}

//phi
params{
    phi                = false
    phi_db             = "/annotation/phi"
}

//island
params{
    island             = false
    island_len         = "4000"
}

//phispy
params{
    phispy             = false
    phispy_len         = "4000"
}

//antismash
params{
    antismash          = false
    antimode           = "gbk"
}

//minced
params{
    minced             = false
}

//final mount
params{
    M_final_mount      = "${params.M_Wuhan_mount} -v ${params.M_pipline_dir}:${params.M_pipline_dir} -v ${params.M_pipline_temp}:/tmp -v ${params.M_kegg_real_db}:${params.kegg_db} -v ${params.M_nr_real_db}:${params.nr_db} -v ${params.M_uniprot_real_db}:${params.uniprot_db} -v ${params.M_pfam_real_db}:${params.pfam_db} -v ${params.M_interpro_real_db}:${params.interpro_db} -v ${params.M_refseq_real_db}:${params.refseq_db} -v ${params.M_anim_tf_real_db}:${params.anim_tf_db} -v ${params.M_plant_tf_real_db}:${params.plant_tf_db} -v ${params.M_tigerfam_real_db}:${params.tigerfam_db} -v ${params.M_tcdb_real_db}:${params.tcdb_db} -v ${params.M_cazy_real_db}:${params.cazy_db} -v ${params.M_cyped_real_db}:${params.cyped_db} -v ${params.M_card_real_db}:${params.card_db} -v ${params.M_ardb_real_db}:${params.ardb_db} -v ${params.M_vfdb_real_db}:${params.vfdb_db} -v ${params.M_phi_real_db}:${params.phi_db} -v ${params.M_egg_real_db}:${params.egg_db}"

    G_final_mount      = "${params.G_Wuhan_mount} -v ${params.G_pipline_dir}:${params.G_pipline_dir} -v ${params.G_pipline_temp}:/tmp -v ${params.G_kegg_real_db}:${params.kegg_db} -v ${params.G_nr_real_db}:${params.nr_db} -v ${params.G_uniprot_real_db}:${params.uniprot_db} -v ${params.G_pfam_real_db}:${params.pfam_db} -v ${params.G_interpro_real_db}:${params.interpro_db} -v ${params.G_refseq_real_db}:${params.refseq_db} -v ${params.G_anim_tf_real_db}:${params.anim_tf_db} -v ${params.G_plant_tf_real_db}:${params.plant_tf_db} -v ${params.G_tigerfam_real_db}:${params.tigerfam_db} -v ${params.G_tcdb_real_db}:${params.tcdb_db} -v ${params.G_cazy_real_db}:${params.cazy_db} -v ${params.G_cyped_real_db}:${params.cyped_db} -v ${params.G_card_real_db}:${params.card_db} -v ${params.G_ardb_real_db}:${params.ardb_db} -v ${params.G_vfdb_real_db}:${params.vfdb_db} -v ${params.G_phi_real_db}:${params.phi_db} -v ${params.G_egg_real_db}:${params.egg_db}"

    T_final_mount      = "${params.T_Wuhan_mount} -v ${params.T_pipline_dir}:${params.T_pipline_dir} -v ${params.T_pipline_temp}:/tmp -v ${params.T_kegg_real_db}:${params.kegg_db} -v ${params.T_nr_real_db}:${params.nr_db} -v ${params.T_uniprot_real_db}:${params.uniprot_db} -v ${params.T_pfam_real_db}:${params.pfam_db} -v ${params.T_interpro_real_db}:${params.interpro_db} -v ${params.T_refseq_real_db}:${params.refseq_db} -v ${params.T_anim_tf_real_db}:${params.anim_tf_db} -v ${params.T_plant_tf_real_db}:${params.plant_tf_db} -v ${params.T_tigerfam_real_db}:${params.tigerfam_db} -v ${params.T_tcdb_real_db}:${params.tcdb_db} -v ${params.T_cazy_real_db}:${params.cazy_db} -v ${params.T_cyped_real_db}:${params.cyped_db} -v ${params.T_card_real_db}:${params.card_db} -v ${params.T_ardb_real_db}:${params.ardb_db} -v ${params.T_vfdb_real_db}:${params.vfdb_db} -v ${params.T_phi_real_db}:${params.phi_db} -v ${params.T_egg_real_db}:${params.egg_db}"

    Y_final_mount      = "${params.Y_Wuhan_mount} -v ${params.Y_pipline_dir}:${params.Y_pipline_dir} -v ${params.Y_pipline_temp}:/tmp -v ${params.Y_kegg_real_db}:${params.kegg_db} -v ${params.Y_nr_real_db}:${params.nr_db} -v ${params.Y_uniprot_real_db}:${params.uniprot_db} -v ${params.Y_pfam_real_db}:${params.pfam_db} -v ${params.Y_interpro_real_db}:${params.interpro_db} -v ${params.Y_refseq_real_db}:${params.refseq_db} -v ${params.Y_anim_tf_real_db}:${params.anim_tf_db} -v ${params.Y_plant_tf_real_db}:${params.plant_tf_db} -v ${params.Y_tigerfam_real_db}:${params.tigerfam_db} -v ${params.Y_tcdb_real_db}:${params.tcdb_db} -v ${params.Y_cazy_real_db}:${params.cazy_db} -v ${params.Y_cyped_real_db}:${params.cyped_db} -v ${params.Y_card_real_db}:${params.card_db} -v ${params.Y_ardb_real_db}:${params.ardb_db} -v ${params.Y_vfdb_real_db}:${params.vfdb_db} -v ${params.Y_phi_real_db}:${params.phi_db} -v ${params.Y_egg_real_db}:${params.egg_db}"
}

int optMaxF_k="${params.maxF_k}".toInteger()
int optMaxF_n="${params.maxF_n}".toInteger()
int optMaxF_u="${params.maxF_u}".toInteger()
int optMaxF_p="${params.maxF_p}".toInteger()
int optMaxF_i="${params.maxF_i}".toInteger()
int optMaxF_r="${params.maxF_r}".toInteger()
int optMaxF_d="${params.maxF_d}".toInteger()
int optMaxF_t="${params.maxF_t}".toInteger()

executor {
    queueSize = 300
}

profiles {
    sgeWuhanM {
        process.executor = 'sge'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.M_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            clusterOptions = "-l vf=2G,q=${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Nr_mem}G,q=${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Uniprot_mem}G,q=${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                clusterOptions = "-l vf=30G,q=${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Pfam_mem}G,q=${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Interpro_mem}G,q=${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Refseq_mem}G,q=${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=3G,q=${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
        }
    }

    sgeWuhanG {
        process.executor = 'sge'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.G_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            clusterOptions = "-l vf=2G,q=${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Nr_mem}G,q=${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Uniprot_mem}G,q=${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                clusterOptions = "-l vf=30G,q=${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Pfam_mem}G,q=${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Interpro_mem}G,q=${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Refseq_mem}G,q=${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=3G,q=${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
        }
    }

    sgeWuhanT {
        process.executor = 'sge'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.T_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            clusterOptions = "-l vf=2G,q=${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Kegg_mem}G,q=${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Nr_mem}G,q=${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Uniprot_mem}G,q=${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                clusterOptions = "-l vf=30G,q=${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Pfam_mem}G,q=${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Interpro_mem}G,q=${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=${params.Refseq_mem}G,q=${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=3G,q=${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                clusterOptions = "-l vf=2G,q=${params.queueq}"
            }
        }
    }

    slurmWuhanM {
        process.executor = 'slurm'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.M_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            memory = "2G"
            queue = "${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                memory = "${params.Nr_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                memory = "${params.Uniprot_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                memory = "30G"
                queue = "${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                memory = "${params.Pfam_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                memory = "${params.Interpro_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                memory = "${params.Refseq_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                memory = "3G"
                queue = "${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
        }
    }

    slurmWuhanG {
        process.executor = 'slurm'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.G_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            memory = "2G"
            queue = "${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                memory = "${params.Nr_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                memory = "${params.Uniprot_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                memory = "30G"
                queue = "${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                memory = "${params.Pfam_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                memory = "${params.Interpro_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                memory = "${params.Refseq_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                memory = "3G"
                queue = "${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
        }
    }

    slurmWuhanT {
        process.executor = 'slurm'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.T_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            memory = "2G"
            queue = "${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                memory = "${params.Nr_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                memory = "${params.Uniprot_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                memory = "30G"
                queue = "${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                memory = "${params.Pfam_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                memory = "${params.Interpro_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                memory = "${params.Refseq_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                memory = "3G"
                queue = "${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
        }
    }

    slurmWuda {
        process.executor = 'slurm'
        process.container = 'all_fun:latest'
        docker.enabled = true
        docker.runOptions = "-u \$(id -u):\$(id -g) -e HOST_Q=\$(hostname) ${params.Y_final_mount}"
        docker.tty = false
        docker.remove = true
        process {
            errorStrategy='retry'
            maxRetries=1
            memory = "2G"
            queue = "${params.queueq}"
            withName: SplitKegg{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KofamScan{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: KofamSearch{
                container = 'kofam_scan:v1.3.0'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKofam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastKegg{
                container = 'all_fun:latest'
                memory = "${params.Kegg_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeKeggKobas{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KobasResultMerge{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PathwayResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastNr{
                container = 'all_fun:latest'
                memory = "${params.Nr_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawNr{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: NrResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastUniprot{
                container = 'all_fun:latest'
                memory = "${params.Uniprot_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeUniprot{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: UniprotResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawGO{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: GoResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: EggNogRun{
                container = 'eggnog-mapper:2.1.7'
                memory = "30G"
                queue = "${params.queueq}"
            }
            withName: CogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultE{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawKog{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: KogResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmPfam{
                container = 'all_fun:latest'
                memory = "${params.Pfam_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergePfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawPfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitInterpro{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Interpro{
                container = 'all_fun:latest'
                memory = "${params.Interpro_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsv{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproGff{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeInterproTsvNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastRefseq{
                container = 'all_fun:latest'
                memory = "${params.Refseq_mem}G"
                queue = "${params.queueq}"
            }
            withName: MergeRefseq{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RefseqResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Split{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTf{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
                errorStrategy = 'ignore'
            }
            withName: TfResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TfResultNoK{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmTigerfam{
                container = 'all_fun:latest'
                memory = "3G"
                queue = "${params.queueq}"
            }
            withName: MergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTigerfam{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TigerfamResultNo{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummary{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AnnoSummaryT{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TcdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawTcdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: HmmCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: FMergeCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CazyResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DrawCazy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeCyped{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CypedResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultShort{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLongTemp{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultLong{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultPicture{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: TmhmmResultHtml{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitSignal{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultRun{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultTemp{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResult{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SignalResultPicture{
                errorStrategy = 'ignore'
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDeeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Deeploc{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: DeeplocResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Rgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeRgi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: RgiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeArdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: ArdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergeVfdb{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: VfdbResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: BlastPhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: MergePhi{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: PhiResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitDimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Dimob{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Island{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SplitPhispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Phispy{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: Prophages{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: CRISPRsResult{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGB{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGG{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: AntismashResultGF{
                container = 'standalone:6.0.0'
                memory = "2G"
                queue = "${params.queueq}"
            }
            withName: SecretedProtein{
                container = 'all_fun:latest'
                memory = "2G"
                queue = "${params.queueq}"
            }
        }
    }
}
