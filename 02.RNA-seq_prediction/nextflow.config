
params {
//help
    h                         = false
    help                      = false
//deal genome
    dos2unix                  = "/usr/bin/dos2unix"
    format_genome             = "y"
//output
    nf_out                    = "Result"
//tmp output
    nf_tmp                    = "temp"
    queueq                    = "all.q"
//mount
    Docker_mount              = "-v /public:/public -v /nfs:/nfs -v /data/user/:/data/user/ -v /calculate:/calculate -v /data/user/fanpengyu/01.pipline/06.structure_new/bin:/soft_env"
    Singularity_mount         = "-B /public:/public -B /nfs:/nfs -B /data/user/:/data/user/ -B /calculate:/calculate -B /data/user/fanpengyu/01.pipline/06.structure_new/bin:/soft_env"
    Singularity_path          = "/data/user/fanpengyu/06.Singularity"

    scallop2                  = "/data/user/fanpengyu/miniconda3/bin/scallop2"
    orfipy                    = "/data/user/fanpengyu/miniconda3/bin/orfipy"

    isoform_soft              = "stringtie"
    orf_soft                  = "TransDecoder"

    run_small                 = "n"
//Transcript
    //NGS
    split_trans               = "n"
    fastp_cpu                 = "16"
    fastqc_cpu                = "16"
    hisat2_build_cpu          = "16"
    hisat2_cpu                = "16"
    NGS_samtools_cpu          = "8"
    NGS_stringtie_cpu         = "16"
    hisat2_mem                = "16"
    merge_NGS_bam_mem         = "20"
    Single_Trans_mem          = "10"
    NGS_stringtie_merge_mem   = "20"
    //ONT
    fl_filter_length          = "50"
    fl_filter_quality         = "7"
    pychopper_cpu             = "16"
    ONT_minimap2_cpu          = "16"
    ONT_samtools_cpu          = "8"
    ONT_stringtie_cpu         = "16"
    NanoFilt_mem              = "4"
    pychopper_mem             = "4"
    ONT_minimap2_mem          = "40"
    merge_ONT_bam_mem         = "40"
    //PB
    PB_type                   = "ccs"
    primer                    = "/data/user/fanpengyu/01.pipline/06.structure_new/bin/03.transcript/default.fasta"
    skip_lima                 = "n"
    ccs_cpu                   = "16"
    pbmm2_cpu                 = "32"
    PB_minimap2_cpu           = "16"
    PB_samtools_cpu           = "8"
    collapse_cpu              = "16"
    pbmm2_mem                 = "40"
    PB_minimap2_mem           = "40"
    collapse_mem              = "10"

    transcode_mem             = "4"

    Fastp_mem                 = "4"
    Fastqc_mem                = "4"
    NGS_stringtie_mem         = "8"
    MinimapIndex_mem          = "6"
    ONT_stringtie_mem         = "8"
    PBccs_mem                 = "10"
    PBlima_mem                = "8"
    PBrefine_mem              = "8"
    PBcluster_mem             = "40"
    cDNA_CupcakeCollapse_mem  = "20"
    TransDcoder_mem           = "16"

    AllQC_mem                 = "2"
    MapStat_mem               = "2"
    AllMapStat_mem            = "2"
    Get_fq_ont_mem            = "2"
    Fq2Fa_mem                 = "2"
    MergeNGS_mem              = "10"
    MergeONT_mem              = "10"
    MergePB_mem               = "10"
    MergeNGSONT_mem           = "10"
    MergeNGSPB_mem            = "10"
//images
    integrate_docker          = "integrate:v1.0"
    integrate_singularity     = "integrate_v1.0.sif"
    tetools_docker            = "dfam/tetools:1.87"
    tetools_singularity       = "dfam_tetools_1.87.sif"
    ncrna_docker              = "ncrna:v1.3"
    ncrna_singularity         = "ncrna_v1.3.sif"
    teclass_docker            = "hatimalmutairi/teclass-2.1.3b:latest"
    teclass_singularity       = "hatimalmutairi_teclass-2.1.3b_latest.sif"
    ltr_docker                = "ltr_retriever2.9.8_genometools_1.6.5:v1.3"
    ltr_singularity           = "ltr_retriever2.9.8_genometools_1.6.5_v1.3.sif"
    transcript_docker         = "transcript:v1.3"
    transcript_singularity    = "transcript_v1.3.sif"
    smrtlink_docker           = "bryce911/smrtlink:12.0.0.177059"
    smrtlink_singularity      = "bryce911_smrtlink_12.0.0.177059.sif"
    homology_docker           = "homology:v1.1"
    homology_singularity      = "homology_v1.1.sif"
    busco_docker              = "ezlabgva/busco:v5.7.0_cv1"
    busco_singularity         = "ezlabgva_busco_v5.7.0_cv1.sif"
    denovo_docker             = "denovo:v1.1"
    denovo_singularity        = "denovo_v1.1.sif"
    maker_docker              = "aflatoxing/maker3:latest"
    maker_singularity         = "aflatoxing_maker3_latest.sif"
    evm_docker                = "evidence_modeler:v2.1.0"
    evm_singularity           = "evidence_modeler_v2.1.0.sif"
}

profiles {
    sge_docker {
        docker {
            enabled = true
            tty = false
            remove = true
            runOptions = "${params.Docker_mount} -u \$(id -u):\$(id -u)"
        }
        process {
            executor="sge"
            errorStrategy='retry'
            maxRetries=1
            queue = "${params.queueq}"
        //genome
            withName: transcode{
                container = "${params.integrate_docker}"
                clusterOptions = "-l vf=${params.transcode_mem}G"
            }
        //Transcript
            withName: Fastp{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.Fastp_mem}G"
            }
            withName: Fastqc{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.Fastqc_mem}G"
            }
            withName: AllQC{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.AllQC_mem}G"
            }
            withName: hisat2_align{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.hisat2_mem}G"
            }
            withName: MapStat{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MapStat_mem}G"
            }
            withName: AllMapStat{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.AllMapStat_mem}G"
            }
            withName: merge_NGS_bam{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.merge_NGS_bam_mem}G"
            }
            withName: NGS_stringtie{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.NGS_stringtie_mem}G"
            }
            withName: Single_Trans{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.Single_Trans_mem}G"
            }
            withName: NGS_stringtie_merge{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.NGS_stringtie_merge_mem}G"
            }
            withName: Get_fq_ont{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.Get_fq_ont_mem}G"
            }
            withName: Nano_Filt_1_Filter{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.NanoFilt_mem}G"
            }
            withName: CdnaClassifier{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.pychopper_mem}G"
            }
            withName: Nano_Filt_2_Filter{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.NanoFilt_mem}G"
            }
            withName: Fq2Fa{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.Fq2Fa_mem}G"
            }
            withName: MinimapIndex{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MinimapIndex_mem}G"
            }
            withName: MinimapClassifier{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.ONT_minimap2_mem}G"
            }
            withName: merge_ONT_bam{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.merge_ONT_bam_mem}G"
            }
            withName: ONT_stringtie{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.ONT_stringtie_mem}G"
            }
            withName: PBccs{
                container = "${params.smrtlink_docker}"
                clusterOptions = "-l vf=${params.PBccs_mem}G"
            }
            withName: PBlima{
                container = "${params.smrtlink_docker}"
                clusterOptions = "-l vf=${params.PBlima_mem}G"
            }
            withName: PBrefine{
                container = "${params.smrtlink_docker}"
                clusterOptions = "-l vf=${params.PBrefine_mem}G"
            }
            withName: PBcluster{
                container = "${params.smrtlink_docker}"
                clusterOptions = "-l vf=${params.PBcluster_mem}G"
            }
            withName: Pbmm2Cluster{
                container = "${params.smrtlink_docker}"
                clusterOptions = "-l vf=${params.pbmm2_mem}G"
            }
            withName: PBCollapse{
                container = "${params.smrtlink_docker}"
                clusterOptions = "-l vf=${params.collapse_mem}G"
            }
            withName: MinimapCluster{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.PB_minimap2_mem}G"
            }
            withName: cDNA_CupcakeCollapse{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.cDNA_CupcakeCollapse_mem}G"
            }
            withName: MergeNGS{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MergeNGS_mem}G"
            }
            withName: MergeONT{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MergeONT_mem}G"
            }
            withName: MergePB{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MergePB_mem}G"
            }
            withName: MergeNGSONT{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MergeNGSONT_mem}G"
            }
            withName: MergeNGSPB{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.MergeNGSPB_mem}G"
            }
            withName: TransDcoder{
                container = "${params.transcript_docker}"
                clusterOptions = "-l vf=${params.TransDcoder_mem}G"
            }
        }
    }

    slurm_docker {
        docker {
            enabled = true
            tty = false
            remove = true
            runOptions = "${params.Docker_mount} -u \$(id -u):\$(id -u)"
        }
        process {
            executor="slurm"
            errorStrategy='retry'
            maxRetries=1
            queue = "${params.queueq}"
        //genome
            withName: transcode{
                container = "${params.integrate_docker}"
                memory = "${params.transcode_mem}G"
            }
        //Transcript
            withName: Fastp{
                container = "${params.transcript_docker}"
                memory = "${params.Fastp_mem}G"
            }
            withName: Fastqc{
                container = "${params.transcript_docker}"
                memory = "${params.Fastqc_mem}G"
            }
            withName: AllQC{
                container = "${params.transcript_docker}"
                memory = "${params.AllQC_mem}G"
            }
            withName: hisat2_align{
                container = "${params.transcript_docker}"
                memory = "${params.hisat2_mem}G"
            }
            withName: MapStat{
                container = "${params.transcript_docker}"
                memory = "${params.MapStat_mem}G"
            }
            withName: AllMapStat{
                container = "${params.transcript_docker}"
                memory = "${params.AllMapStat_mem}G"
            }
            withName: merge_NGS_bam{
                container = "${params.transcript_docker}"
                memory = "${params.merge_NGS_bam_mem}G"
            }
            withName: NGS_stringtie{
                container = "${params.transcript_docker}"
                memory = "${params.NGS_stringtie_mem}G"
            }
            withName: Single_Trans{
                container = "${params.transcript_docker}"
                memory = "${params.Single_Trans_mem}G"
            }
            withName: NGS_stringtie_merge{
                container = "${params.transcript_docker}"
                memory = "${params.NGS_stringtie_merge_mem}G"
            }
            withName: Get_fq_ont{
                container = "${params.transcript_docker}"
                memory = "${params.Get_fq_ont_mem}G"
            }
            withName: Nano_Filt_1_Filter{
                container = "${params.transcript_docker}"
                memory = "${params.NanoFilt_mem}G"
            }
            withName: CdnaClassifier{
                container = "${params.transcript_docker}"
                memory = "${params.pychopper_mem}G"
            }
            withName: Nano_Filt_2_Filter{
                container = "${params.transcript_docker}"
                memory = "${params.NanoFilt_mem}G"
            }
            withName: Fq2Fa{
                container = "${params.transcript_docker}"
                memory = "${params.Fq2Fa_mem}G"
            }
            withName: MinimapIndex{
                container = "${params.transcript_docker}"
                memory = "${params.MinimapIndex_mem}G"
            }
            withName: MinimapClassifier{
                container = "${params.transcript_docker}"
                memory = "${params.ONT_minimap2_mem}G"
            }
            withName: merge_ONT_bam{
                container = "${params.transcript_docker}"
                memory = "${params.merge_ONT_bam_mem}G"
            }
            withName: ONT_stringtie{
                container = "${params.transcript_docker}"
                memory = "${params.ONT_stringtie_mem}G"
            }
            withName: PBccs{
                container = "${params.smrtlink_docker}"
                memory = "${params.PBccs_mem}G"
            }
            withName: PBlima{
                container = "${params.smrtlink_docker}"
                memory = "${params.PBlima_mem}G"
            }
            withName: PBrefine{
                container = "${params.smrtlink_docker}"
                memory = "${params.PBrefine_mem}G"
            }
            withName: PBcluster{
                container = "${params.smrtlink_docker}"
                memory = "${params.PBcluster_mem}G"
            }
            withName: Pbmm2Cluster{
                container = "${params.smrtlink_docker}"
                memory = "${params.pbmm2_mem}G"
            }
            withName: PBCollapse{
                container = "${params.smrtlink_docker}"
                memory = "${params.collapse_mem}G"
            }
            withName: MinimapCluster{
                container = "${params.transcript_docker}"
                memory = "${params.PB_minimap2_mem}G"
            }
            withName: cDNA_CupcakeCollapse{
                container = "${params.transcript_docker}"
                memory = "${params.cDNA_CupcakeCollapse_mem}G"
            }
            withName: MergeNGS{
                container = "${params.transcript_docker}"
                memory = "${params.MergeNGS_mem}G"
            }
            withName: MergeONT{
                container = "${params.transcript_docker}"
                memory = "${params.MergeONT_mem}G"
            }
            withName: MergePB{
                container = "${params.transcript_docker}"
                memory = "${params.MergePB_mem}G"
            }
            withName: MergeNGSONT{
                container = "${params.transcript_docker}"
                memory = "${params.MergeNGSONT_mem}G"
            }
            withName: MergeNGSPB{
                container = "${params.transcript_docker}"
                memory = "${params.MergeNGSPB_mem}G"
            }
            withName: TransDcoder{
                container = "${params.transcript_docker}"
                memory = "${params.TransDcoder_mem}G"
            }
        }
    }

    sge_singularity {
        singularity {
            enabled = true
            autoMounts = false
            runOptions = "${params.Singularity_mount}"
            envWhitelist = ['SINGULARITY_TMPDIR']
        }
        process {
            executor="sge"
            errorStrategy='retry'
            maxRetries=1
            queue = "${params.queueq}"
        //genome
            withName: transcode{
                container = "${params.Singularity_path}/${params.integrate_singularity}"
                clusterOptions = "-l vf=${params.transcode_mem}G"
            }
        //Transcript
            withName: Fastp{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.Fastp_mem}G"
            }
            withName: Fastqc{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.Fastqc_mem}G"
            }
            withName: AllQC{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.AllQC_mem}G"
            }
            withName: hisat2_align{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.hisat2_mem}G"
            }
            withName: MapStat{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MapStat_mem}G"
            }
            withName: AllMapStat{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.AllMapStat_mem}G"
            }
            withName: merge_NGS_bam{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.merge_NGS_bam_mem}G"
            }
            withName: NGS_stringtie{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.NGS_stringtie_mem}G"
            }
            withName: Single_Trans{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.Single_Trans_mem}G"
            }
            withName: NGS_stringtie_merge{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.NGS_stringtie_merge_mem}G"
            }
            withName: Get_fq_ont{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.Get_fq_ont_mem}G"
            }
            withName: Nano_Filt_1_Filter{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.NanoFilt_mem}G"
            }
            withName: CdnaClassifier{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.pychopper_mem}G"
            }
            withName: Nano_Filt_2_Filter{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.NanoFilt_mem}G"
            }
            withName: Fq2Fa{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.Fq2Fa_mem}G"
            }
            withName: MinimapIndex{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MinimapIndex_mem}G"
            }
            withName: MinimapClassifier{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.ONT_minimap2_mem}G"
            }
            withName: merge_ONT_bam{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.merge_ONT_bam_mem}G"
            }
            withName: ONT_stringtie{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.ONT_stringtie_mem}G"
            }
            withName: PBccs{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                clusterOptions = "-l vf=${params.PBccs_mem}G"
            }
            withName: PBlima{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                clusterOptions = "-l vf=${params.PBlima_mem}G"
            }
            withName: PBrefine{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                clusterOptions = "-l vf=${params.PBrefine_mem}G"
            }
            withName: PBcluster{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                clusterOptions = "-l vf=${params.PBcluster_mem}G"
            }
            withName: Pbmm2Cluster{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                clusterOptions = "-l vf=${params.pbmm2_mem}G"
            }
            withName: PBCollapse{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                clusterOptions = "-l vf=${params.collapse_mem}G"
            }
            withName: MinimapCluster{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.PB_minimap2_mem}G"
            }
            withName: cDNA_CupcakeCollapse{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.cDNA_CupcakeCollapse_mem}G"
            }
            withName: MergeNGS{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MergeNGS_mem}G"
            }
            withName: MergeONT{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MergeONT_mem}G"
            }
            withName: MergePB{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MergePB_mem}G"
            }
            withName: MergeNGSONT{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MergeNGSONT_mem}G"
            }
            withName: MergeNGSPB{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.MergeNGSPB_mem}G"
            }
            withName: TransDcoder{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                clusterOptions = "-l vf=${params.TransDcoder_mem}G"
            }
        }
    }

    slurm_singularity {
        singularity {
            enabled = true
            autoMounts = false
            runOptions = "${params.Singularity_mount}"
            envWhitelist = ['SINGULARITY_TMPDIR']
        }
        process {
            executor="slurm"
            errorStrategy='retry'
            maxRetries=1
            queue = "${params.queueq}"
        //genome
            withName: transcode{
                container = "${params.Singularity_path}/${params.integrate_singularity}"
                memory = "${params.transcode_mem}G"
            }
        //Transcript
            withName: Fastp{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.Fastp_mem}G"
            }
            withName: Fastqc{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.Fastqc_mem}G"
            }
            withName: AllQC{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.AllQC_mem}G"
            }
            withName: hisat2_align{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.hisat2_mem}G"
            }
            withName: MapStat{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MapStat_mem}G"
            }
            withName: AllMapStat{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.AllMapStat_mem}G"
            }
            withName: merge_NGS_bam{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.merge_NGS_bam_mem}G"
            }
            withName: NGS_stringtie{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.NGS_stringtie_mem}G"
            }
            withName: Single_Trans{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.Single_Trans_mem}G"
            }
            withName: NGS_stringtie_merge{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.NGS_stringtie_merge_mem}G"
            }
            withName: Get_fq_ont{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.Get_fq_ont_mem}G"
            }
            withName: Nano_Filt_1_Filter{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.NanoFilt_mem}G"
            }
            withName: CdnaClassifier{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.pychopper_mem}G"
            }
            withName: Nano_Filt_2_Filter{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.NanoFilt_mem}G"
            }
            withName: Fq2Fa{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.Fq2Fa_mem}G"
            }
            withName: MinimapIndex{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MinimapIndex_mem}G"
            }
            withName: MinimapClassifier{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.ONT_minimap2_mem}G"
            }
            withName: merge_ONT_bam{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.merge_ONT_bam_mem}G"
            }
            withName: ONT_stringtie{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.ONT_stringtie_mem}G"
            }
            withName: PBccs{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                memory = "${params.PBccs_mem}G"
            }
            withName: PBlima{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                memory = "${params.PBlima_mem}G"
            }
            withName: PBrefine{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                memory = "${params.PBrefine_mem}G"
            }
            withName: PBcluster{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                memory = "${params.PBcluster_mem}G"
            }
            withName: Pbmm2Cluster{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                memory = "${params.pbmm2_mem}G"
            }
            withName: PBCollapse{
                container = "${params.Singularity_path}/${params.smrtlink_singularity}"
                memory = "${params.collapse_mem}G"
            }
            withName: MinimapCluster{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.PB_minimap2_mem}G"
            }
            withName: cDNA_CupcakeCollapse{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.cDNA_CupcakeCollapse_mem}G"
            }
            withName: MergeNGS{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MergeNGS_mem}G"
            }
            withName: MergeONT{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MergeONT_mem}G"
            }
            withName: MergePB{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MergePB_mem}G"
            }
            withName: MergeNGSONT{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MergeNGSONT_mem}G"
            }
            withName: MergeNGSPB{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.MergeNGSPB_mem}G"
            }
            withName: TransDcoder{
                container = "${params.Singularity_path}/${params.transcript_singularity}"
                memory = "${params.TransDcoder_mem}G"
            }
        }
    }
}
